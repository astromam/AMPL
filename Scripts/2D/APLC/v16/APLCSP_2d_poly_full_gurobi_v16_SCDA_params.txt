#################################################################
### AMPL script to design APLC/SP hybrid coronagraph with full pupil for SCDA
### Full pupil is assumed to have symmetries along x and y-axis. 
### Computation is only done over quarter pupil intermediate focal plane B and re-imaged pupil plane C
### This code is an intermediate step toward a code for design optimization with several Lyot stops
### Written by Mamadou N'Diaye on 2016/09/16
#################################################################
### parameters set by the user
#################################################################
#---------------------
### directory definition
param directoryMain symbolic;
param directoryFPM symbolic;
let directoryMain := "/astro/opticslab1/Users/Mamadou/AMPL/PupilDataFiles/2D/SCDA/";
let directoryFPM := "/astro/opticslab1/Users/Mamadou/AMPL/PupilDataFiles/2D/General/CircPupil/";

#---------------------
### pi defintion
param pi := 4*atan(1);

#---------------------
### spectral bandwidth (la0: arbitrary unit, bw: bandwidth in % of lam0, dlam: bandwidth in arbitrary unit, nlam: spectral sampling)
### optimization in monochromatic light is done by setting bw=0 (and not nlam=1)
param lam0 := 1.;
param bw := 0.10;
param dlam := bw*lam0;
param nlam := 3;

#---------------------
### FPM radius in lam0/D
param rMask := 8./2;

#---------------------
### diamater ratio between aperture and Lyot stop 
param CoeffOverSizePup :=0.98;

#---------------------
### Outer diameter of each region in lam0/D
param rho0 := 3.5;
param rho1 := 10.0;
#param rho2 := 40.0;

#---------------------
### contrast definition in the different regions of the coronagraphic image
param cCoreRegion:=6;
param cDarkHoleRegion:= 10;
#param cSecondaryRegion :=7;

#---------------------
### discretization parameter (nPup: pupil, nFPM: mask, nImg: image, Fmax: max spatial frequency in image plane)
param nPup := 100;				
param nFPM := 50;
param nImg := 60;# 60; # 84;# 

param Fmax := 25;# 25; # 35;# 

#################################################################
### filename definitions
#################################################################
#---------------------
### files for import
param filenameAperture symbolic;
param filenameFPM symbolic;
param filenameLyotStop symbolic;
let filenameAperture := "SCDA_TelApInscribed_full_hex3X025cobs1_N0200_BW1.dat";
let filenameFPM := "CircPupil_N=0100_obs=00_center.dat";
let filenameLyotStop := "SCDA_LyotStopInscribed_full_ID=20_OD=81_Xspiders=08_N0200_BW.dat";

#---------------------
### files for export
param filenameApodizerDat symbolic;
param filenameApodizerLog symbolic;
let filenameApodizerDat := "SCDA_ApodizerInscribed_full_hex3X025cobs1_N0200_test26.dat";
let filenameApodizerLog := "SCDA_ApodizerInscribed_full_hex3X025cobs1_N0200_test26_log.txt";

#################################################################
### vector definitions
#################################################################
#---------------------
### array of wavelengths
set Ls := setof {l in 1..nlam} lam0*(1+((l-1)/(nlam-1)-0.5)*dlam);

#---------------------
### discretization in each plane ({dx,dy}: pupil planes, {dmx, dmy}: first focal plane, {dxi, deta}: final image plane)
param dx := 1/(2*nPup);
param dy := dx;

param dmx := 2.*rMask/(2*nFPM);
param dmy := dmx;

param dxi := (Fmax/nImg)*(1/CoeffOverSizePup);
param deta := dxi;

#---------------------
### coordinate vectors for each plane ({Xs,Ys}: pupil planes, {MXs, MYs}: first focal plane, {Xis, Etas}: final image plane)
set XsQ := setof {i in 0.5..nImg-0.5 by 1} i*dx;
set YsQ := setof {j in 0.5..nImg-0.5 by 1} j*dy;

set Xs := setof {i in -nImg+0.5..nImg-0.5 by 1} i*dx;
set Ys := setof {j in -nImg+0.5..nImg-0.5 by 1} j*dy;

set MXsQ := setof {i in 0.5..nFPM-0.5 by 1} i*dmx;
set MYsQ := setof {j in 0.5..nFPM-0.5 by 1} j*dmy;

set MXs := setof {i in -nFPM+0.5..nFPM-0.5 by 1} i*dmx;
set MYs := setof {j in -nFPM+0.5..nFPM-0.5 by 1} j*dmy;

set Xis := setof {i in -nImg..nImg-1 by 1} i*dxi;
set Etas := setof {j in -nImg..nImg-1 by 1} j*deta;

#---------------------
### set of points in the final image plane, only for 360deg masks
#set CoroCoreRegion := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) >= 0 && sqrt(xi^2+eta^2) < rho0} (xi,eta);
set CoroDarkHoleRegion := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) >= rho0 && sqrt(xi^2+eta^2) <= rho1} (xi,eta);
#set CoroSecondaryRegion := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) > rho1 && sqrt(xi^2+eta^2) <= rho2} (xi,eta);

set CoroOuterRegionAll := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) >= rho0 && sqrt(xi^2+eta^2) <= rho1} (xi,eta);


#################################################################
### file import and mask definition
#################################################################
#---------------------
### import Pupil, Mask (FPM), and Lyot stop files 
param PupilFile {x in Xs,y in Ys};
read {x in Xs,y in Ys} PupilFile[x,y] < (sprintf("%s%s", directoryMain, filenameAperture)); 
close (sprintf("%s%s", directoryMain, filenameAperture));

param MaskFile {mx in MXs, my in MYs};
read {mx in MXs, my in MYs} MaskFile[mx,my] < (sprintf("%s%s", directoryFPM, filenameFPM));
close (sprintf("%s%s", directoryFPM, filenameFPM));

param LyotFile {x in Xs,y in Ys};
read {x in Xs,y in Ys} LyotFile[x,y] < (sprintf("%s%s", directoryMain,filenameLyotStop));
close (sprintf("%s%s", directoryMain, filenameLyotStop));

#---------------------
### definition of set of points where Pupil, Mask, and Lyot are non null
set Pupil := setof {x in Xs, y in Ys: PupilFile[x,y] != 0.} (x,y);
set Mask := setof {mx in MXs, my in MYs: MaskFile[mx,my] != 0.} (mx,my);
set Lyot := setof {x in Xs, y in Ys: LyotFile[x,y] != 0.} (x,y);

set PupilQuarter := setof {x in XsQ, y in YsQ: PupilFile[x,y] != 0} (x,y);
set MaskQuarter := setof {mx in MXsQ, my in MYsQ: MaskFile[mx,my] != 0} (mx,my);
set LyotQuarter := setof {x in XsQ, y in YsQ: LyotFile[x,y] != 0} (x,y);

#---------------------
### transmission of the Pupil. Used for calibration.
param TR := sum {x in Xs, y in Ys} PupilFile[x,y]*dx*dy;

#################################################################
### propagation through APLC coronagraph
#################################################################
#---------------------
### variable A apodizer with transmission to optimize, values ranging between 0 and 1, default value 0.5
var A_quarter {x in XsQ, y in YsQ} >= 0, <= 1, := 0.5;
var A {x in Xs, y in Ys} := 0.0;
subject to st_A_1 {x in XsQ, y in YsQ}: A[x,y]  =A_quarter[x,y];
subject to st_A_2 {x in XsQ, y in YsQ}: A[-x,y] =A_quarter[x,y];
subject to st_A_3 {x in XsQ, y in YsQ}: A[x,-y] =A_quarter[x,y];
subject to st_A_4 {x in XsQ, y in YsQ}: A[-x,-y]=A_quarter[x,y];

#---------------------
### electric field within the FPM in plane B
var EBm_cx_quarter {x in XsQ, my in MYsQ, lam in Ls} := 0.0;
var EBm_real_quarter {mx in MXsQ, my in MYsQ, lam in Ls} := 0.0;

subject to st_EBm_cx_quarter {x in XsQ, my in MYsQ, lam in Ls}: EBm_cx_quarter[x,my,lam] = 2.*sum {y in YsQ: (x,y) in PupilQuarter} A_quarter[x,y]*PupilFile[x,y]*cos(2*pi*y*my*(lam0/lam))*dy;
subject to st_EBm_real_quarter {(mx,my) in MaskQuarter, lam in Ls}: EBm_real_quarter[mx,my,lam] = 2.*(lam0/lam)*sum {x in XsQ} (EBm_cx_quarter[x,my,lam]*cos(2*pi*x*mx*(lam0/lam)))*dx;

#---------------------
### electric field in plane C (before Lyot stop), be careful, FPM is assumed to be binary. If not, add MaskFile in the expression
#---------------------
var ECm1_Bmreal_cx_quarter {mx in MXsQ, y in YsQ, lam in Ls} := 0.0;
var ECm_real_quarter {x in XsQ, y in YsQ, lam in Ls} := 0.0;

subject to st_ECm1_Bmreal_cx_quarter {mx in MXsQ, y in YsQ, lam in Ls}: ECm1_Bmreal_cx_quarter[mx,y,lam] = 2.*sum {my in MYsQ: (mx,my) in MaskQuarter} EBm_real_quarter[mx,my,lam]*cos(2*pi*y*my*(lam0/lam))*dmy;
subject to st_ECm_real_quarter {x in XsQ, y in YsQ, lam in Ls}: ECm_real_quarter[x,y,lam] = 2.*(lam0/lam)*sum {mx in MXsQ} (ECm1_Bmreal_cx_quarter[mx,y,lam]*cos(2*pi*x*mx*(lam0/lam)))*dmx;

#---------------------
var ECm_real {x in Xs, y in Ys, lam in Ls} := 0.0;
subject to st_ECm_real_1 {x in XsQ, y in YsQ, lam in Ls}: ECm_real[x,y,lam]  =ECm_real_quarter[x,y,lam];
subject to st_ECm_real_2 {x in XsQ, y in YsQ, lam in Ls}: ECm_real[-x,y,lam] =ECm_real_quarter[x,y,lam];
subject to st_ECm_real_3 {x in XsQ, y in YsQ, lam in Ls}: ECm_real[x,-y,lam] =ECm_real_quarter[x,y,lam];
subject to st_ECm_real_4 {x in XsQ, y in YsQ, lam in Ls}: ECm_real[-x,-y,lam]=ECm_real_quarter[x,y,lam];

#---------------------
### electric field in plane D (final image)
var ED1_ECmreal_cx {x in Xs, eta in Etas, lam in Ls} := 0.0;
var ED1_ECmreal_sx {x in Xs, eta in Etas, lam in Ls} := 0.0;
var ED_real {xi in Xis, eta in Etas, lam in Ls} := 0.0;
var ED_imag {xi in Xis, eta in Etas, lam in Ls} := 0.0;

subject to st_ED1_ECmreal_cx {x in Xs, eta in Etas, lam in Ls}: ED1_ECmreal_cx[x,eta,lam] = sum {y in Ys: (x,y) in Lyot} (A[x,y]*PupilFile[x,y]-ECm_real[x,y,lam])*LyotFile[x,y]*cos(2*pi*y*eta*(lam0/lam))*dy;
subject to st_ED1_ECmreal_sx {x in Xs, eta in Etas, lam in Ls}: ED1_ECmreal_sx[x,eta,lam] = sum {y in Ys: (x,y) in Lyot} (A[x,y]*PupilFile[x,y]-ECm_real[x,y,lam])*LyotFile[x,y]*sin(2*pi*y*eta*(lam0/lam))*dy;

subject to st_ED_real {(xi, eta) in CoroOuterRegionAll, lam in Ls}: ED_real[xi,eta,lam] = (lam0/lam)*sum {x in Xs} (ED1_ECmreal_cx[x,eta,lam]*cos(2*pi*x*xi*(lam0/lam))-ED1_ECmreal_sx[x,eta,lam]*sin(2*pi*x*xi*(lam0/lam)))*dx;
subject to st_ED_imag {(xi, eta) in CoroOuterRegionAll, lam in Ls}: ED_imag[xi,eta,lam] = (lam0/lam)*sum {x in Xs} -(ED1_ECmreal_cx[x,eta,lam]*sin(2*pi*x*xi*(lam0/lam))+ED1_ECmreal_sx[x,eta,lam]*cos(2*pi*x*xi*(lam0/lam)))*dx;

#---------------------
### electric field peak of the image at lam0 (no coronagraph mask) 
var ED00_real := 0.0;
subject to st_ED00_real: ED00_real = 2.*sum {x in Xs, y in Ys: (x,y) in Lyot} (A[x,y]*PupilFile[x,y]*LyotFile[x,y])*dx*dy;

#################################################################
### optimization problem
#################################################################
#---------------------
### maximization of the apodizer throughput/transmission
maximize throughput: sum{(x,y) in Pupil} A[x,y]*dx*dy/TR;

#---------------------
### constraints in the coronagraphic image core region
#subject to sidelobe_zero_real_pos_core {(xi,eta) in CoroCoreRegion, lam in Ls}: ED_real[xi,eta,lam] <= 10^(-cCoreRegion/2)*ED00_real/sqrt(2.);
#subject to sidelobe_zero_real_neg_core {(xi,eta) in CoroCoreRegion, lam in Ls}: ED_real[xi,eta,lam] >= -10^(-cCoreRegion/2)*ED00_real/sqrt(2.);
#subject to sidelobe_zero_imag_pos_core {(xi,eta) in CoroCoreRegion, lam in Ls}: ED_imag[xi,eta,lam] <= 10^(-cCoreRegion/2)*ED00_real/sqrt(2.);
#subject to sidelobe_zero_imag_neg_core {(xi,eta) in CoroCoreRegion, lam in Ls}: ED_imag[xi,eta,lam] >= -10^(-cCoreRegion/2)*ED00_real/sqrt(2.);

#---------------------
### constraints in the dark hole region
subject to sidelobe_zero_real_pos {(xi,eta) in CoroDarkHoleRegion, lam in Ls}: ED_real[xi,eta,lam] <= 10^(-cDarkHoleRegion/2)*ED00_real/sqrt(2.);
subject to sidelobe_zero_real_neg {(xi,eta) in CoroDarkHoleRegion, lam in Ls}: ED_real[xi,eta,lam] >= -10^(-cDarkHoleRegion/2)*ED00_real/sqrt(2.);
subject to sidelobe_zero_imag_pos {(xi,eta) in CoroDarkHoleRegion, lam in Ls}: ED_imag[xi,eta,lam] <= 10^(-cDarkHoleRegion/2)*ED00_real/sqrt(2.);
subject to sidelobe_zero_imag_neg {(xi,eta) in CoroDarkHoleRegion, lam in Ls}: ED_imag[xi,eta,lam] >= -10^(-cDarkHoleRegion/2)*ED00_real/sqrt(2.);

#---------------------
### constraints in the secondary dark hole region
#subject to sidelobe_zero_real_pos_wings {(xi,eta) in CoroSecondaryRegion, lam in Ls}: ED_real[xi,eta,lam] <= 10^(-cSecondaryRegion/2)*ED00_real/sqrt(2.);
#subject to sidelobe_zero_real_neg_wings {(xi,eta) in CoroSecondaryRegion, lam in Ls}: ED_real[xi,eta,lam] >= -10^(-cSecondaryRegion/2)*ED00_real/sqrt(2.);
#subject to sidelobe_zero_imag_pos_wings {(xi,eta) in CoroSecondaryRegion, lam in Ls}: ED_imag[xi,eta,lam] <= 10^(-cSecondaryRegion/2)*ED00_real/sqrt(2.);
#subject to sidelobe_zero_imag_neg_wings {(xi,eta) in CoroSecondaryRegion, lam in Ls}: ED_imag[xi,eta,lam] >= -10^(-cSecondaryRegion/2)*ED00_real/sqrt(2.);

#################################################################
### solver for optimization problem
#################################################################
#---------------------
### options for AMPL
option times 1;
option gentimes 1;
option show_stats 1;
option TMPDIR '/ssdfast1/tmp/';

#---------------------
### options for gurobi solver with linear programming method
option solver gurobi;
option gurobi_options "outlev=1 lpmethod=2 crossover=0";

#---------------------
### solve and display of the result
solve;
display solve_result_num, solve_result;

#################################################################
### export solution
#################################################################
#---------------------
### export solution A (apodizer/shaped pupil for APLC) 
printf {x in Xs, y in Ys}: "%15g %15g %15g \n", x, y, A[x,y] > (sprintf("%s%s", directoryMain, filenameApodizerDat));

#---------------------
### log file
option log_file (sprintf("%s%s", directoryMain, filenameApodizerLog));