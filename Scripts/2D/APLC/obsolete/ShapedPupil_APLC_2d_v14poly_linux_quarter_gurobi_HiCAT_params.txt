load amplgsl.dll;
#function gsl_sf_bessel_J0;
#function gsl_sf_bessel_J1;

#---------------------

param pi := 4*atan(1);

#---------------------
param c :=8;
param cCore :=6;
param cWings2 :=7;
param cWings3 :=7;


#---------------------
param Rmask := 8.644/2;

param rho0 := 3.0;
param rho1 := 10.0; #30.0; #25.0;
param rho2 := 45.0;
param rho3 := 57.0;

#---------------------
param N := 246;				# discretization parameter (pupil)
param M := 25;				# discretization parameter (mask)

param Nimg := 144;# 60; # 84;# 			# discretization parameter (image)
param Fmax := 60;# 25; # 35;# 

#---------------------
param bw := 0.10;
param lam0 := 1.;
param dl := bw*lam0;
param Nlam := 3;

#---------------------
param Normterm := 1.;

#---------------------
param CoeffOverSizePup :=0.817;

#---------------------
param dx := 1/(2*N);

param dy := dx;

param dmx := 2.*Rmask/(2*M);
param dmy := dmx;

param dxi := (Fmax/Nimg)*(1/CoeffOverSizePup);
param deta := dxi;

#---------------------
set Xs := setof {i in 0.5..N-0.5 by 1} i*dx;
set Ys := setof {j in 0.5..N-0.5 by 1} j*dy;

set MXs := setof {i in 0.5..M-0.5 by 1} i*dmx;
set MYs := setof {j in 0.5..M-0.5 by 1} j*dmy;

set Ls := setof {l in 1..Nlam} lam0*(1+((l-1)/(Nlam-1)-0.5)*dl);

#---------------------
### aperture with obstruction
param PupilFile {x in Xs,y in Ys};

read {x in Xs,y in Ys} PupilFile[x,y] < ("/astro/opticslab1/Users/Mamadou/AMPL/BPLC/HiCAT_Files/HiCAT_P3_PupilMaskForApodizer_nHalf=0246_quarter.dat"); # Loading Pupil
close ("/astro/opticslab1/Users/Mamadou/AMPL/BPLC/HiCAT_Files/HiCAT_P3_PupilMaskForApodizer_nHalf=0246_quarter.dat");

param MaskFile {mx in MXs, my in MYs};

read {mx in MXs, my in MYs} MaskFile[mx,my] < ("/astro/opticslab1/Users/Mamadou/AMPL/BPLC/Pupil Data File/CircPupil_N=00" & M & "_obs=00_center_quarter.dat"); # Loading Mask
close ("/astro/opticslab1/Users/Mamadou/AMPL/BPLC/Pupil Data File/CircPupil_N=00" & M & "_obs=00_center_quarter.dat");

param LyotFile {x in Xs,y in Ys};
read {x in Xs,y in Ys} LyotFile[x,y] < ("/astro/opticslab1/Users/Mamadou/AMPL/BPLC/HiCAT_Files/HiCAT_P5_LyotStopMask_nHalf=0246_quarter_LS=Gray.dat"); # Loading Lyot stop
close ("/astro/opticslab1/Users/Mamadou/AMPL/BPLC/HiCAT_Files/HiCAT_P5_LyotStopMask_nHalf=0246_quarter_LS=Gray.dat");


#---------------------
set Pupil := setof {x in Xs, y in Ys: PupilFile[x,y] != 0.} (x,y);
set Mask := setof {mx in MXs, my in MYs: MaskFile[mx,my] != 0.} (mx,my);
set Lyot := setof {x in Xs, y in Ys: LyotFile[x,y] != 0.} (x,y);

param TR := sum {x in Xs, y in Ys} PupilFile[x,y]*dx*dy; # Transmission of the Pupil. Used for calibration.

var A {x in Xs, y in Ys} >= 0, <= 1, := 0.5;

#---------------------

set Xis := setof {i in 0..Nimg by 1} i*dxi; 
set Etas := setof {j in 0..Nimg by 1} j*deta;

set DarkHole := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) >= rho0 && sqrt(xi^2+eta^2) <= rho1} (xi,eta); # Only for 360deg masks.
set PSFCore := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) >= 0 && sqrt(xi^2+eta^2) < rho0} (xi,eta); # Only for 360deg masks.
set PSFOuterWings2 := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) > rho1 && sqrt(xi^2+eta^2) <= rho2} (xi,eta); # Only for 360deg masks.
set PSFOuterWings3 := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) > rho2 && sqrt(xi^2+eta^2) <= rho3} (xi,eta); # Only for 360deg masks.

set InsideArea := setof {xi in Xis, eta in Etas: sqrt(xi^2+eta^2) >= 0 && sqrt(xi^2+eta^2) <= rho3} (xi,eta); # Only for 360deg masks.

#---------------------
var EBm_real_X {mx in MXs, y in Ys, lam in Ls} := 0.0;
var EBm_real {mx in MXs, my in MYs, lam in Ls} := 0.0;

subject to st_EBm_real_X {mx in MXs, y in Ys, lam in Ls}: EBm_real_X[mx,y,lam] = 2.*sum {x in Xs: (x,y) in Pupil} A[x,y]*PupilFile[x,y]*cos(2.*pi*x*mx*(lam0/lam))*dx;
subject to st_EBm_real {(mx, my) in Mask, lam in Ls}: EBm_real[mx,my,lam] = 2.*(lam0/lam)*sum {y in Ys} EBm_real_X[mx,y,lam]*cos(2.*pi*y*my*(lam0/lam))*dy;


#---------------------
var ECm_real_X {x in Xs, my in MYs, lam in Ls} := 0.0;
var ECm_real {x in Xs, y in Ys, lam in Ls} := 0.0;

subject to st_ECm_real_X {x in Xs, my in MYs, lam in Ls}: ECm_real_X[x,my,lam] = 2.*sum {mx in MXs: (mx,my) in Mask} EBm_real[mx,my,lam]*cos(2.*pi*x*mx*(lam0/lam))*dmx;

subject to st_ECm_real {(x,y) in Lyot, lam in Ls}: ECm_real[x,y,lam] = 2.*(lam0/lam)*sum {my in MYs} ECm_real_X[x,my,lam]*cos(2.*pi*y*my*(lam0/lam))*dmy;

#---------------------
var ED_real_X {xi in Xis, y in Ys, lam in Ls} := 0.0;
var ED_real {xi in Xis, eta in Etas, lam in Ls} := 0.0;

subject to st_ED_real_X {xi in Xis, y in Ys, lam in Ls}: ED_real_X[xi,y,lam] = 2.*sum {x in Xs: (x,y) in Lyot} (A[x,y]*PupilFile[x,y]-ECm_real[x,y,lam])*LyotFile[x,y]*cos(2.*pi*x*xi*(lam0/lam))*dx;
subject to st_ED_real {(xi, eta) in InsideArea, lam in Ls}: ED_real[xi,eta,lam] = 2.*(lam0/lam)*sum {y in Ys} ED_real_X[xi,y,lam]*cos(2.*pi*y*eta*(lam0/lam))*dy;

#---------------------
var ED00_real := 0.0;
subject to st_ED00_real: ED00_real = 4.*sum {x in Xs, y in Ys: (x,y) in Lyot} (A[x,y]*PupilFile[x,y]*LyotFile[x,y])*dx*dy;


#---------------------
maximize throughput: sum{(x,y) in Pupil} A[x,y]*dx*dy/TR;

subject to sidelobe_zero_real_pos {(xi,eta) in DarkHole, lam in Ls}: ED_real[xi,eta,lam] <= 10^(-c/2)*ED00_real/sqrt(2.); 
subject to sidelobe_zero_real_neg {(xi,eta) in DarkHole, lam in Ls}: ED_real[xi,eta,lam] >= -10^(-c/2)*ED00_real/sqrt(2.);
# sqrt(2.) factor is for margin purpose at all the wavelengths;

subject to sidelobe_zero_real_pos_core {(xi,eta) in PSFCore, lam in Ls}: ED_real[xi,eta,lam] <= 10^(-cCore/2)*ED00_real/sqrt(2.); 
subject to sidelobe_zero_real_neg_core {(xi,eta) in PSFCore, lam in Ls}: ED_real[xi,eta,lam] >= -10^(-cCore/2)*ED00_real/sqrt(2.);

subject to sidelobe_zero_real_pos_wings2 {(xi,eta) in PSFOuterWings2, lam in Ls}: ED_real[xi,eta,lam] <= 10^(-cWings2/2)*ED00_real/sqrt(2.); 
subject to sidelobe_zero_real_neg_wings2 {(xi,eta) in PSFOuterWings2, lam in Ls}: ED_real[xi,eta,lam] >= -10^(-cWings2/2)*ED00_real/sqrt(2.);

subject to sidelobe_zero_real_pos_wings3 {(xi,eta) in PSFOuterWings3, lam in Ls}: ED_real[xi,eta,lam] <= 10^(-cWings3/2)*ED00_real/sqrt(2.); 
subject to sidelobe_zero_real_neg_wings3 {(xi,eta) in PSFOuterWings3, lam in Ls}: ED_real[xi,eta,lam] >= -10^(-cWings3/2)*ED00_real/sqrt(2.);


option times 1;
option gentimes 1;
option show_stats 1;
option TMPDIR '/ssdfast1/tmp';

option solver gurobi;
option gurobi_options "outlev=1 lpmethod=2 crossover=0";

solve;
display solve_result_num, solve_result;

#---------------------
printf {x in Xs, y in Ys}: "%15g %15g %15g \n", x, y, A[x,y] > ("/astro/opticslab1/Users/Mamadou/AMPL/BPLC/HiCAT_Files/HiCAT_P3_FinalApodizerMask_nHalf=0246_quarter_v10_LS=Gray.dat");
